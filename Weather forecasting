import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Load the dataset (replace 'weather_data.csv' with your dataset)
# Dataset should have 'Date' and 'Temperature' columns
df = pd.read_csv('weather_data.csv')
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

# Visualize the temperature history
plt.figure(figsize=(14, 6))
plt.plot(df['Temperature'], label='Temperature History')
plt.title('Weather Temperature History')
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.show()

# Data Preprocessing
# Use only the 'Temperature' column for prediction
data = df['Temperature'].values.reshape(-1, 1)

# Scale the data between 0 and 1 for LSTM
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Define training data length (80% of total data)
train_len = int(np.ceil(len(scaled_data) * 0.8))

# Split data into training and testing sets
train_data = scaled_data[0:train_len, :]
test_data = scaled_data[train_len - 60:, :]

# Prepare the data for the LSTM model (lookback = 60 days)
def create_dataset(data, lookback=60):
    x, y = [], []
    for i in range(lookback, len(data)):
        x.append(data[i - lookback:i, 0])
        y.append(data[i, 0])
    return np.array(x), np.array(y)

# Create training and testing datasets
x_train, y_train = create_dataset(train_data)
x_test, y_test = create_dataset(test_data)

# Reshape the data to 3D for LSTM (samples, timesteps, features)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# Build the LSTM Model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=25))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(x_train, y_train, batch_size=32, epochs=10)

# Predictions
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)  # Convert back to original scale

# Visualize the prediction results
train = df[:train_len]
valid = df[train_len:]
valid['Predictions'] = predictions

plt.figure(figsize=(14, 6))
plt.title('Model Predictions vs Actual Weather Temperature')
plt.plot(train['Temperature'], label='Train')
plt.plot(valid['Temperature'], label='Actual')
plt.plot(valid['Predictions'], label='Predicted')
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.legend()
plt.show()

# Print the predicted temperatures
print(valid[['Temperature', 'Predictions']])
